//! Generated by Snowball 2.2.0 - https://snowballstem.org/

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_mut)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use snowball::SnowballEnv;
use snowball::Among;

static A_0: &'static [Among<Context>; 10] = &[
    Among("bh", -1, -1, None),
    Among("ch", -1, -1, None),
    Among("dh", -1, -1, None),
    Among("gh", -1, -1, None),
    Among("jh", -1, -1, None),
    Among("kh", -1, -1, None),
    Among("ph", -1, -1, None),
    Among("th", -1, -1, None),
    Among("\u{1E0D}h", -1, -1, None),
    Among("\u{1E6D}h", -1, -1, None),
];

static A_1: &'static [Among<Context>; 71] = &[
    Among("ena", -1, 1, None),
    Among("assa", -1, 1, None),
    Among("issa", -1, 2, None),
    Among("ussa", -1, 3, None),
    Among("\u{0101}ya", -1, 1, None),
    Among("e", -1, 1, None),
    Among("ave", 5, 3, None),
    Among("ehi", -1, 1, None),
    Among("amhi", -1, 1, None),
    Among("imhi", -1, 2, None),
    Among("umhi", -1, 3, None),
    Among("\u{0101}hi", -1, 4, None),
    Among("\u{012B}hi", -1, 2, None),
    Among("\u{016B}hi", -1, 3, None),
    Among("ini", -1, 2, None),
    Among("\u{0101}ni", -1, 1, None),
    Among("\u{012B}ni", -1, 2, None),
    Among("\u{016B}ni", -1, 3, None),
    Among("o", -1, 1, None),
    Among("ino", 18, 2, None),
    Among("uno", 18, 3, None),
    Among("avo", 18, 3, None),
    Among("ayo", 18, 2, None),
    Among("iyo", 18, 2, None),
    Among("uyo", 18, 3, None),
    Among("\u{0101}yo", 18, 4, None),
    Among("esu", -1, 1, None),
    Among("isu", -1, 2, None),
    Among("usu", -1, 3, None),
    Among("\u{0101}su", -1, 4, None),
    Among("\u{012B}su", -1, 2, None),
    Among("\u{016B}su", -1, 3, None),
    Among("a\u{1E41}", -1, 1, None),
    Among("ina\u{1E41}", 32, 5, None),
    Among("\u{0101}na\u{1E41}", 32, 1, None),
    Among("\u{012B}na\u{1E41}", 32, 2, None),
    Among("\u{016B}na\u{1E41}", 32, 3, None),
    Among("iya\u{1E41}", 32, 2, None),
    Among("uya\u{1E41}", 32, 3, None),
    Among("\u{0101}ya\u{1E41}", 32, 4, None),
    Among("i\u{1E41}", -1, 2, None),
    Among("asmi\u{1E41}", 40, 1, None),
    Among("ismi\u{1E41}", 40, 2, None),
    Among("usmi\u{1E41}", 40, 3, None),
    Among("u\u{1E41}", -1, 3, None),
    Among("\u{0101}", -1, 1, None),
    Among("amh\u{0101}", 45, 1, None),
    Among("imh\u{0101}", 45, 2, None),
    Among("umh\u{0101}", 45, 3, None),
    Among("asm\u{0101}", 45, 1, None),
    Among("ism\u{0101}", 45, 2, None),
    Among("usm\u{0101}", 45, 3, None),
    Among("in\u{0101}", 45, 2, None),
    Among("un\u{0101}", 45, 3, None),
    Among("iy\u{0101}", 45, 2, None),
    Among("uy\u{0101}", 45, 3, None),
    Among("a\u{1E43}", -1, 1, None),
    Among("ina\u{1E43}", 56, 5, None),
    Among("\u{0101}na\u{1E43}", 56, 1, None),
    Among("\u{012B}na\u{1E43}", 56, 2, None),
    Among("\u{016B}na\u{1E43}", 56, 3, None),
    Among("iya\u{1E43}", 56, 2, None),
    Among("uya\u{1E43}", 56, 3, None),
    Among("\u{0101}ya\u{1E43}", 56, 4, None),
    Among("i\u{1E43}", -1, 2, None),
    Among("asmi\u{1E43}", 64, 1, None),
    Among("ismi\u{1E43}", 64, 2, None),
    Among("usmi\u{1E43}", 64, 3, None),
    Among("u\u{1E43}", -1, 3, None),
    Among("\u{012B}", -1, 2, None),
    Among("\u{016B}", -1, 3, None),
];

static G_vowel: &'static [u8; 34] = &[17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4];

#[derive(Clone)]
struct Context {
    i_p1: usize,
}

fn r_mark_regions(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.i_p1 = env.limit;
    'lab0: loop {
        let v_1 = env.cursor;
        'lab1: loop {
            if !env.in_grouping(G_vowel, 97, 363) {
                break 'lab1;
            }
            'golab2: loop {
                let v_2 = env.cursor;
                'lab3: loop {
                    if !env.out_grouping(G_vowel, 97, 363) {
                        break 'lab3;
                    }
                    env.cursor = v_2;
                    break 'golab2;
                }
                env.cursor = v_2;
                if env.cursor >= env.limit {
                    break 'lab1;
                }
                env.next_char();
            }
            'lab4: loop {
                let v_3 = env.cursor;
                'lab5: loop {
                    if env.find_among(A_0, context) == 0 {
                        break 'lab5;
                    }
                    break 'lab4;
                }
                env.cursor = v_3;
                if env.cursor >= env.limit {
                    break 'lab1;
                }
                env.next_char();
                break 'lab4;
            }
            context.i_p1 = env.cursor;
            break 'lab0;
        }
        env.cursor = v_1;
        if !env.out_grouping(G_vowel, 97, 363) {
            return false;
        }
        'golab6: loop {
            'lab7: loop {
                if !env.in_grouping(G_vowel, 97, 363) {
                    break 'lab7;
                }
                break 'golab6;
            }
            if env.cursor >= env.limit {
                return false;
            }
            env.next_char();
        }
        context.i_p1 = env.cursor;
        break 'lab0;
    }
    return true;
}

fn r_R1(env: &mut SnowballEnv, context: &mut Context) -> bool {
    if !(context.i_p1 <= env.cursor){
        return false;
    }
    return true;
}

fn r_declensions(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_1, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !r_R1(env, context) {
        return false;
    }
    if among_var == 1 {
        if !env.slice_from("a") {
            return false;
        }
    } else if among_var == 2 {
        if !env.slice_from("i") {
            return false;
        }
    } else if among_var == 3 {
        if !env.slice_from("u") {
            return false;
        }
    } else if among_var == 4 {
        if !env.slice_from("\u{0101}") {
            return false;
        }
    } else if among_var == 5 {
        if !env.slice_from("\u{012B}") {
            return false;
        }
    }
    return true;
}

pub fn stem(env: &mut SnowballEnv) -> bool {
    let mut context = &mut Context {
        i_p1: 0,
    };
    let v_1 = env.cursor;
    r_mark_regions(env, context);
    env.cursor = v_1;
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    let v_2 = env.limit - env.cursor;
    r_declensions(env, context);
    env.cursor = env.limit - v_2;
    env.cursor = env.limit_backward;
    return true;
}
